// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: calque.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FlowService_ExecuteFlow_FullMethodName = "/calque.FlowService/ExecuteFlow"
	FlowService_StreamFlow_FullMethodName  = "/calque.FlowService/StreamFlow"
)

// FlowServiceClient is the client API for FlowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FlowService provides gRPC methods for executing calque flows
type FlowServiceClient interface {
	// ExecuteFlow executes a flow with a single request/response
	// This is the primary method for running flows synchronously
	ExecuteFlow(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (*FlowResponse, error)
	// StreamFlow executes a flow with bidirectional streaming
	// Allows for real-time communication during flow execution
	StreamFlow(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingFlowRequest, StreamingFlowResponse], error)
}

type flowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowServiceClient(cc grpc.ClientConnInterface) FlowServiceClient {
	return &flowServiceClient{cc}
}

func (c *flowServiceClient) ExecuteFlow(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (*FlowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlowResponse)
	err := c.cc.Invoke(ctx, FlowService_ExecuteFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) StreamFlow(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingFlowRequest, StreamingFlowResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FlowService_ServiceDesc.Streams[0], FlowService_StreamFlow_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingFlowRequest, StreamingFlowResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FlowService_StreamFlowClient = grpc.BidiStreamingClient[StreamingFlowRequest, StreamingFlowResponse]

// FlowServiceServer is the server API for FlowService service.
// All implementations must embed UnimplementedFlowServiceServer
// for forward compatibility.
//
// FlowService provides gRPC methods for executing calque flows
type FlowServiceServer interface {
	// ExecuteFlow executes a flow with a single request/response
	// This is the primary method for running flows synchronously
	ExecuteFlow(context.Context, *FlowRequest) (*FlowResponse, error)
	// StreamFlow executes a flow with bidirectional streaming
	// Allows for real-time communication during flow execution
	StreamFlow(grpc.BidiStreamingServer[StreamingFlowRequest, StreamingFlowResponse]) error
	mustEmbedUnimplementedFlowServiceServer()
}

// UnimplementedFlowServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlowServiceServer struct{}

func (UnimplementedFlowServiceServer) ExecuteFlow(context.Context, *FlowRequest) (*FlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFlow not implemented")
}
func (UnimplementedFlowServiceServer) StreamFlow(grpc.BidiStreamingServer[StreamingFlowRequest, StreamingFlowResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamFlow not implemented")
}
func (UnimplementedFlowServiceServer) mustEmbedUnimplementedFlowServiceServer() {}
func (UnimplementedFlowServiceServer) testEmbeddedByValue()                     {}

// UnsafeFlowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowServiceServer will
// result in compilation errors.
type UnsafeFlowServiceServer interface {
	mustEmbedUnimplementedFlowServiceServer()
}

func RegisterFlowServiceServer(s grpc.ServiceRegistrar, srv FlowServiceServer) {
	// If the following call pancis, it indicates UnimplementedFlowServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FlowService_ServiceDesc, srv)
}

func _FlowService_ExecuteFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).ExecuteFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_ExecuteFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).ExecuteFlow(ctx, req.(*FlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_StreamFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlowServiceServer).StreamFlow(&grpc.GenericServerStream[StreamingFlowRequest, StreamingFlowResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FlowService_StreamFlowServer = grpc.BidiStreamingServer[StreamingFlowRequest, StreamingFlowResponse]

// FlowService_ServiceDesc is the grpc.ServiceDesc for FlowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calque.FlowService",
	HandlerType: (*FlowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteFlow",
			Handler:    _FlowService_ExecuteFlow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFlow",
			Handler:       _FlowService_StreamFlow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calque.proto",
}

const (
	AIService_Chat_FullMethodName       = "/calque.AIService/Chat"
	AIService_StreamChat_FullMethodName = "/calque.AIService/StreamChat"
)

// AIServiceClient is the client API for AIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AIService provides gRPC methods for AI operations
type AIServiceClient interface {
	// Chat performs a chat completion with the specified AI model
	// Returns a single response with potential tool calls
	Chat(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (*AIResponse, error)
	// StreamChat performs a streaming chat completion
	// Returns a stream of responses for real-time AI interactions
	StreamChat(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AIResponse], error)
}

type aIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIServiceClient(cc grpc.ClientConnInterface) AIServiceClient {
	return &aIServiceClient{cc}
}

func (c *aIServiceClient) Chat(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (*AIResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AIResponse)
	err := c.cc.Invoke(ctx, AIService_Chat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) StreamChat(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AIResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AIService_ServiceDesc.Streams[0], AIService_StreamChat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AIRequest, AIResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_StreamChatClient = grpc.ServerStreamingClient[AIResponse]

// AIServiceServer is the server API for AIService service.
// All implementations must embed UnimplementedAIServiceServer
// for forward compatibility.
//
// AIService provides gRPC methods for AI operations
type AIServiceServer interface {
	// Chat performs a chat completion with the specified AI model
	// Returns a single response with potential tool calls
	Chat(context.Context, *AIRequest) (*AIResponse, error)
	// StreamChat performs a streaming chat completion
	// Returns a stream of responses for real-time AI interactions
	StreamChat(*AIRequest, grpc.ServerStreamingServer[AIResponse]) error
	mustEmbedUnimplementedAIServiceServer()
}

// UnimplementedAIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIServiceServer struct{}

func (UnimplementedAIServiceServer) Chat(context.Context, *AIRequest) (*AIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedAIServiceServer) StreamChat(*AIRequest, grpc.ServerStreamingServer[AIResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamChat not implemented")
}
func (UnimplementedAIServiceServer) mustEmbedUnimplementedAIServiceServer() {}
func (UnimplementedAIServiceServer) testEmbeddedByValue()                   {}

// UnsafeAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServiceServer will
// result in compilation errors.
type UnsafeAIServiceServer interface {
	mustEmbedUnimplementedAIServiceServer()
}

func RegisterAIServiceServer(s grpc.ServiceRegistrar, srv AIServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIService_ServiceDesc, srv)
}

func _AIService_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).Chat(ctx, req.(*AIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_StreamChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AIRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AIServiceServer).StreamChat(m, &grpc.GenericServerStream[AIRequest, AIResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_StreamChatServer = grpc.ServerStreamingServer[AIResponse]

// AIService_ServiceDesc is the grpc.ServiceDesc for AIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calque.AIService",
	HandlerType: (*AIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _AIService_Chat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChat",
			Handler:       _AIService_StreamChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "calque.proto",
}

const (
	MemoryService_ProcessMemory_FullMethodName = "/calque.MemoryService/ProcessMemory"
)

// MemoryServiceClient is the client API for MemoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MemoryService provides gRPC methods for memory operations
type MemoryServiceClient interface {
	// ProcessMemory handles various memory operations (get, set, delete, list, exists)
	// Supports key-value storage with metadata and TTL capabilities
	ProcessMemory(ctx context.Context, in *MemoryRequest, opts ...grpc.CallOption) (*MemoryResponse, error)
}

type memoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemoryServiceClient(cc grpc.ClientConnInterface) MemoryServiceClient {
	return &memoryServiceClient{cc}
}

func (c *memoryServiceClient) ProcessMemory(ctx context.Context, in *MemoryRequest, opts ...grpc.CallOption) (*MemoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemoryResponse)
	err := c.cc.Invoke(ctx, MemoryService_ProcessMemory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemoryServiceServer is the server API for MemoryService service.
// All implementations must embed UnimplementedMemoryServiceServer
// for forward compatibility.
//
// MemoryService provides gRPC methods for memory operations
type MemoryServiceServer interface {
	// ProcessMemory handles various memory operations (get, set, delete, list, exists)
	// Supports key-value storage with metadata and TTL capabilities
	ProcessMemory(context.Context, *MemoryRequest) (*MemoryResponse, error)
	mustEmbedUnimplementedMemoryServiceServer()
}

// UnimplementedMemoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMemoryServiceServer struct{}

func (UnimplementedMemoryServiceServer) ProcessMemory(context.Context, *MemoryRequest) (*MemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMemory not implemented")
}
func (UnimplementedMemoryServiceServer) mustEmbedUnimplementedMemoryServiceServer() {}
func (UnimplementedMemoryServiceServer) testEmbeddedByValue()                       {}

// UnsafeMemoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemoryServiceServer will
// result in compilation errors.
type UnsafeMemoryServiceServer interface {
	mustEmbedUnimplementedMemoryServiceServer()
}

func RegisterMemoryServiceServer(s grpc.ServiceRegistrar, srv MemoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedMemoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MemoryService_ServiceDesc, srv)
}

func _MemoryService_ProcessMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).ProcessMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryService_ProcessMemory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).ProcessMemory(ctx, req.(*MemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemoryService_ServiceDesc is the grpc.ServiceDesc for MemoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calque.MemoryService",
	HandlerType: (*MemoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessMemory",
			Handler:    _MemoryService_ProcessMemory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calque.proto",
}

const (
	ToolsService_ExecuteTool_FullMethodName  = "/calque.ToolsService/ExecuteTool"
	ToolsService_ExecuteTools_FullMethodName = "/calque.ToolsService/ExecuteTools"
)

// ToolsServiceClient is the client API for ToolsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ToolsService provides gRPC methods for tool operations
type ToolsServiceClient interface {
	// ExecuteTool executes a single tool with the provided arguments
	// Returns the result of the tool execution
	ExecuteTool(ctx context.Context, in *ToolRequest, opts ...grpc.CallOption) (*ToolResponse, error)
	// ExecuteTools executes multiple tools concurrently
	// Processes a stream of tool requests and returns results as they complete
	ExecuteTools(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ToolRequest, ToolResponse], error)
}

type toolsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToolsServiceClient(cc grpc.ClientConnInterface) ToolsServiceClient {
	return &toolsServiceClient{cc}
}

func (c *toolsServiceClient) ExecuteTool(ctx context.Context, in *ToolRequest, opts ...grpc.CallOption) (*ToolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolResponse)
	err := c.cc.Invoke(ctx, ToolsService_ExecuteTool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolsServiceClient) ExecuteTools(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ToolRequest, ToolResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ToolsService_ServiceDesc.Streams[0], ToolsService_ExecuteTools_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ToolRequest, ToolResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ToolsService_ExecuteToolsClient = grpc.BidiStreamingClient[ToolRequest, ToolResponse]

// ToolsServiceServer is the server API for ToolsService service.
// All implementations must embed UnimplementedToolsServiceServer
// for forward compatibility.
//
// ToolsService provides gRPC methods for tool operations
type ToolsServiceServer interface {
	// ExecuteTool executes a single tool with the provided arguments
	// Returns the result of the tool execution
	ExecuteTool(context.Context, *ToolRequest) (*ToolResponse, error)
	// ExecuteTools executes multiple tools concurrently
	// Processes a stream of tool requests and returns results as they complete
	ExecuteTools(grpc.BidiStreamingServer[ToolRequest, ToolResponse]) error
	mustEmbedUnimplementedToolsServiceServer()
}

// UnimplementedToolsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedToolsServiceServer struct{}

func (UnimplementedToolsServiceServer) ExecuteTool(context.Context, *ToolRequest) (*ToolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTool not implemented")
}
func (UnimplementedToolsServiceServer) ExecuteTools(grpc.BidiStreamingServer[ToolRequest, ToolResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteTools not implemented")
}
func (UnimplementedToolsServiceServer) mustEmbedUnimplementedToolsServiceServer() {}
func (UnimplementedToolsServiceServer) testEmbeddedByValue()                      {}

// UnsafeToolsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolsServiceServer will
// result in compilation errors.
type UnsafeToolsServiceServer interface {
	mustEmbedUnimplementedToolsServiceServer()
}

func RegisterToolsServiceServer(s grpc.ServiceRegistrar, srv ToolsServiceServer) {
	// If the following call pancis, it indicates UnimplementedToolsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ToolsService_ServiceDesc, srv)
}

func _ToolsService_ExecuteTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolsServiceServer).ExecuteTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToolsService_ExecuteTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolsServiceServer).ExecuteTool(ctx, req.(*ToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolsService_ExecuteTools_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ToolsServiceServer).ExecuteTools(&grpc.GenericServerStream[ToolRequest, ToolResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ToolsService_ExecuteToolsServer = grpc.BidiStreamingServer[ToolRequest, ToolResponse]

// ToolsService_ServiceDesc is the grpc.ServiceDesc for ToolsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToolsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calque.ToolsService",
	HandlerType: (*ToolsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTool",
			Handler:    _ToolsService_ExecuteTool_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteTools",
			Handler:       _ToolsService_ExecuteTools_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calque.proto",
}
